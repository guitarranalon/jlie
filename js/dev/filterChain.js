// Generated by CoffeeScript 1.3.1
var BrightnessProcessor, ContrastProcessor, ExposureProcessor, FilterProcessor, SaturationProcessor, SharpenProcessor, VibranceProcessor, brightness, contrast, exposure, filterChain, saturation, sharpen, vibrance,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

FilterProcessor = (function() {

  FilterProcessor.name = 'FilterProcessor';

  function FilterProcessor(successor) {
    this.successor = successor;
  }

  FilterProcessor.prototype.handleFilter = function(image, filterValues) {
    return this.successor.handleFilter(image, filterValues);
  };

  return FilterProcessor;

})();

ExposureProcessor = (function(_super) {

  __extends(ExposureProcessor, _super);

  ExposureProcessor.name = 'ExposureProcessor';

  function ExposureProcessor() {
    return ExposureProcessor.__super__.constructor.apply(this, arguments);
  }

  ExposureProcessor.prototype.handleFilter = function(image, filterValues) {
    if (filterValues.exposure !== 0) {
      image.exposure(filterValues.exposure);
    }
    if (this.successor) {
      return this.successor.handleFilter(image, filterValues);
    }
  };

  return ExposureProcessor;

})(FilterProcessor);

BrightnessProcessor = (function(_super) {

  __extends(BrightnessProcessor, _super);

  BrightnessProcessor.name = 'BrightnessProcessor';

  function BrightnessProcessor() {
    return BrightnessProcessor.__super__.constructor.apply(this, arguments);
  }

  BrightnessProcessor.prototype.handleFilter = function(image, filterValues) {
    if (filterValues.brightness !== 0) {
      image.brightness(filterValues.brightness);
    }
    if (this.successor) {
      return this.successor.handleFilter(image, filterValues);
    }
  };

  return BrightnessProcessor;

})(FilterProcessor);

ContrastProcessor = (function(_super) {

  __extends(ContrastProcessor, _super);

  ContrastProcessor.name = 'ContrastProcessor';

  function ContrastProcessor() {
    return ContrastProcessor.__super__.constructor.apply(this, arguments);
  }

  ContrastProcessor.prototype.handleFilter = function(image, filterValues) {
    if (filterValues.contrast !== 0) {
      image.contrast(filterValues.contrast);
    }
    if (this.successor) {
      return this.successor.handleFilter(image, filterValues);
    }
  };

  return ContrastProcessor;

})(FilterProcessor);

VibranceProcessor = (function(_super) {

  __extends(VibranceProcessor, _super);

  VibranceProcessor.name = 'VibranceProcessor';

  function VibranceProcessor() {
    return VibranceProcessor.__super__.constructor.apply(this, arguments);
  }

  VibranceProcessor.prototype.handleFilter = function(image, filterValues) {
    if (filterValues.vibrance !== 0) {
      image.vibrance(filterValues.vibrance);
    }
    if (this.successor) {
      return this.successor.handleFilter(image, filterValues);
    }
  };

  return VibranceProcessor;

})(FilterProcessor);

SaturationProcessor = (function(_super) {

  __extends(SaturationProcessor, _super);

  SaturationProcessor.name = 'SaturationProcessor';

  function SaturationProcessor() {
    return SaturationProcessor.__super__.constructor.apply(this, arguments);
  }

  SaturationProcessor.prototype.handleFilter = function(image, filterValues) {
    if (filterValues.saturation !== 0) {
      image.saturation(filterValues.saturation);
    }
    if (this.successor) {
      return this.successor.handleFilter(image, filterValues);
    }
  };

  return SaturationProcessor;

})(FilterProcessor);

SharpenProcessor = (function(_super) {

  __extends(SharpenProcessor, _super);

  SharpenProcessor.name = 'SharpenProcessor';

  function SharpenProcessor() {
    return SharpenProcessor.__super__.constructor.apply(this, arguments);
  }

  SharpenProcessor.prototype.handleFilter = function(image, filterValues) {
    if (filterValues.sharpen !== 0) {
      image.sharpen(filterValues.sharpen);
    }
    if (this.successor) {
      return this.successor.handleFilter(image, filterValues);
    }
  };

  return SharpenProcessor;

})(FilterProcessor);

sharpen = new SharpenProcessor(null);

saturation = new SaturationProcessor(sharpen);

vibrance = new VibranceProcessor(saturation);

contrast = new ContrastProcessor(vibrance);

brightness = new BrightnessProcessor(contrast);

exposure = new ExposureProcessor(brightness);

filterChain = new FilterProcessor(exposure);
